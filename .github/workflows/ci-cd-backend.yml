name: Java CI with Gradle

on:
  push:
    branches: [ "be-dev", "be-feature"]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:

      # github actions에서 사용할 jdk 버전 설정
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: move to backend directory
        run: cd backend

      # application.yml 생성
      - name: make application.yml
        working-directory: backend
        run: |
          mkdir -p ./src/main/resources # resources 폴더 생성
          cd ./src/main/resources # resources 폴더로 이동
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
          echo "${{ secrets.APPLICATION_YAML }}" > ./application.yaml


      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # gradle build
      - name: Build with Gradle Wrapper
        working-directory: backend
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 도커 이미지 빌드 및 docker hub로 push
      # 필요하면 if: contains(github.ref, 'main') 이런거 쓸 수 있음
      - name: docker build / push docker hub
        working-directory: backend
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/issue_docker .
          docker push ${{ secrets.DOCKER_USERNAME }}/issue_docker

      # 생성된 docker 이미지를 EC2로 보내기
      # if: contains(github.ref, 'develop')
      - name: docker hub to EC2
        uses: appleboy/ssh-action@master
        id: deploy-dev
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.EC2_USERNAME }} # ubuntu
          # password: ${{ secrets.PASSWORD }} # 비밀번호는 pem이 대신 해줄거야.
          port: 22
          key: ${{ secrets.EC2_PRI_KEY }}
          script: |
            # 기존 컨테이너 중지 및 제거
            CONTAINER_ID=$(sudo docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/issue_docker)
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/issue_docker
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/issue_docker
            sudo docker image prune -f
